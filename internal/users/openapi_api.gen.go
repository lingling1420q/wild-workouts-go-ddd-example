// Package main provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package main

import (
	"context"
	"net/http"

	"github.com/go-chi/chi"
)

type ServerInterface interface {
	//  (GET /users/current)
	GetCurrentUser(w http.ResponseWriter, r *http.Request)
}

// GetCurrentUser operation middleware
func GetCurrentUserCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		ctx = context.WithValue(ctx, "bearerAuth.Scopes", []string{""})

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerFromMux(si, chi.NewRouter())
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	r.Group(func(r chi.Router) {
		r.Use(GetCurrentUserCtx)
		r.Get("/users/current", si.GetCurrentUser)
	})

	return r
}
