// Package ports provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package ports

import (
	"context"
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi"
)

type ServerInterface interface {
	//  (GET /trainings)
	GetTrainings(w http.ResponseWriter, r *http.Request)
	//  (POST /trainings)
	CreateTraining(w http.ResponseWriter, r *http.Request)
	//  (DELETE /trainings/{trainingUUID})
	CancelTraining(w http.ResponseWriter, r *http.Request)
	//  (PUT /trainings/{trainingUUID}/approve-reschedule)
	ApproveRescheduleTraining(w http.ResponseWriter, r *http.Request)
	//  (PUT /trainings/{trainingUUID}/reject-reschedule)
	RejectRescheduleTraining(w http.ResponseWriter, r *http.Request)
	//  (PUT /trainings/{trainingUUID}/request-reschedule)
	RequestRescheduleTraining(w http.ResponseWriter, r *http.Request)
	//  (PUT /trainings/{trainingUUID}/reschedule)
	RescheduleTraining(w http.ResponseWriter, r *http.Request)
}

// GetTrainings operation middleware
func GetTrainingsCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		ctx = context.WithValue(ctx, "bearerAuth.Scopes", []string{""})

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// CreateTraining operation middleware
func CreateTrainingCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		ctx = context.WithValue(ctx, "bearerAuth.Scopes", []string{""})

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// CancelTraining operation middleware
func CancelTrainingCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		// ------------- Path parameter "trainingUUID" -------------
		var trainingUUID string

		err = runtime.BindStyledParameter("simple", false, "trainingUUID", chi.URLParam(r, "trainingUUID"), &trainingUUID)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter trainingUUID: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "trainingUUID", trainingUUID)

		ctx = context.WithValue(ctx, "bearerAuth.Scopes", []string{""})

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// ApproveRescheduleTraining operation middleware
func ApproveRescheduleTrainingCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		// ------------- Path parameter "trainingUUID" -------------
		var trainingUUID string

		err = runtime.BindStyledParameter("simple", false, "trainingUUID", chi.URLParam(r, "trainingUUID"), &trainingUUID)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter trainingUUID: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "trainingUUID", trainingUUID)

		ctx = context.WithValue(ctx, "bearerAuth.Scopes", []string{""})

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// RejectRescheduleTraining operation middleware
func RejectRescheduleTrainingCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		// ------------- Path parameter "trainingUUID" -------------
		var trainingUUID string

		err = runtime.BindStyledParameter("simple", false, "trainingUUID", chi.URLParam(r, "trainingUUID"), &trainingUUID)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter trainingUUID: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "trainingUUID", trainingUUID)

		ctx = context.WithValue(ctx, "bearerAuth.Scopes", []string{""})

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// RequestRescheduleTraining operation middleware
func RequestRescheduleTrainingCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		// ------------- Path parameter "trainingUUID" -------------
		var trainingUUID string

		err = runtime.BindStyledParameter("simple", false, "trainingUUID", chi.URLParam(r, "trainingUUID"), &trainingUUID)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter trainingUUID: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "trainingUUID", trainingUUID)

		ctx = context.WithValue(ctx, "bearerAuth.Scopes", []string{""})

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// RescheduleTraining operation middleware
func RescheduleTrainingCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		// ------------- Path parameter "trainingUUID" -------------
		var trainingUUID string

		err = runtime.BindStyledParameter("simple", false, "trainingUUID", chi.URLParam(r, "trainingUUID"), &trainingUUID)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter trainingUUID: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "trainingUUID", trainingUUID)

		ctx = context.WithValue(ctx, "bearerAuth.Scopes", []string{""})

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerFromMux(si, chi.NewRouter())
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	r.Group(func(r chi.Router) {
		r.Use(GetTrainingsCtx)
		r.Get("/trainings", si.GetTrainings)
	})
	r.Group(func(r chi.Router) {
		r.Use(CreateTrainingCtx)
		r.Post("/trainings", si.CreateTraining)
	})
	r.Group(func(r chi.Router) {
		r.Use(CancelTrainingCtx)
		r.Delete("/trainings/{trainingUUID}", si.CancelTraining)
	})
	r.Group(func(r chi.Router) {
		r.Use(ApproveRescheduleTrainingCtx)
		r.Put("/trainings/{trainingUUID}/approve-reschedule", si.ApproveRescheduleTraining)
	})
	r.Group(func(r chi.Router) {
		r.Use(RejectRescheduleTrainingCtx)
		r.Put("/trainings/{trainingUUID}/reject-reschedule", si.RejectRescheduleTraining)
	})
	r.Group(func(r chi.Router) {
		r.Use(RequestRescheduleTrainingCtx)
		r.Put("/trainings/{trainingUUID}/request-reschedule", si.RequestRescheduleTraining)
	})
	r.Group(func(r chi.Router) {
		r.Use(RescheduleTrainingCtx)
		r.Put("/trainings/{trainingUUID}/reschedule", si.RescheduleTraining)
	})

	return r
}
